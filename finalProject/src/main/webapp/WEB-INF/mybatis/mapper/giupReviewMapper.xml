<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="giupreview">


<!-- insert into giupreview(rep_num, rep_star, rep_content, m1_num, g1_num, jumun_num) values(GIUPREVIEW_SEQ.nextval, 4, '맛있었습니다', 41, 1004, 48 ); -->

<select id="selectReviewSeq" resultType="Integer">
	select GIUPREVIEW_SEQ.nextval from dual
</select>


<!-- 리뷰 삽입 / 리뷰 등록 -->
<insert id="insertGiupReview" parameterType="com.sp.giupReview.giupReview">
	insert into giupreview(rep_num, rep_star, rep_content, m1_num, g1_num, jumun_num) 
		values(#{rep_num}, #{rep_star}, #{rep_content}, #{m1_num}, (
			select distinct mc.g1_num from menucate mc
			    join MAINMENU mm on mm.menuct_Num = mc.menuct_Num
			    join mainGoods mg on mm.mainmenu_Num = mg.mainmenu_Num
			    join jumun j on j.jumun_Num = mg.jumun_Num
			    where j.jumun_Num = #{jumun_num}
		), #{jumun_num} )
</insert>

<!-- 리뷰 있는지 없는지 확인 -->
<select id="getNumReview" parameterType="com.sp.giupReview.giupReview" resultType="Integer">
	select nvl(count(*), 0) from giupReview
		where m1_num = #{m1_num} and jumun_num=  #{jumun_num}
</select>

<!-- 리뷰 내용 가져오기 -->
<select id="getReview" parameterType="com.sp.giupReview.giupReview" resultType="com.sp.giupReview.giupReview">
	select rep_num, rep_star, rep_created, rep_content, m1_num, g1_num, jumun_num from giupReview
		where m1_num = #{m1_num} and jumun_num=  #{jumun_num}
</select>

<!-- 리뷰 삭제하기 -->
<delete id="deleteReview" parameterType="com.sp.giupReview.giupReview">
	delete giupReview
		where m1_num = #{m1_num} and jumun_num=  #{jumun_num}
</delete>



<!-- 리뷰 사진 -->
<!-- 사진 삽입 -->
<insert id="insertReviewPhoto" parameterType="com.sp.giupReview.giupReview">
	insert into reviewPhoto (rphoto_SaveFilename, rphoto_OriginalFilename, REP_NUM)
		values(#{rphoto_SaveFilename}, #{rphoto_OriginalFilename}, #{rep_num} )
</insert>



<!-- 사진과 리뷰 가져오기 -->
<select id="getReviewWithPhoto" parameterType="com.sp.giupReview.giupReview" resultType="com.sp.giupReview.giupReview">
	select gr.rep_num, rep_star, rep_content, rep_created, m1_num, g1_num, jumun_num, rp.rphoto_SaveFilename, rp.rphoto_OriginalFilename
		from giupReview gr
		left outer join reviewphoto rp on gr.rep_num = rp.rep_num
		where m1_num= #{m1_num} and jumun_num= #{jumun_num}

</select>

<!-- 사진과 리뷰 리스트 가져오기 -->
<select id="getReviewListWithPhoto" parameterType="com.sp.giupReview.giupReview" resultType="com.sp.giupReview.giupReview">
	select r.rep_num, g.g1_name, rep_star, rep_created, rep_content, m1_num, g.g1_num, jumun_num, rp.rphoto_OriginalFilename, rp.rphoto_SaveFilename from giupReview r
		left outer join reviewphoto rp on rp.rep_num = r.rep_num 
    	left outer join giup1 g on g.g1_num = r.g1_num
		where m1_num = #{m1_num} 
</select>  






<!-- Admin에서 리뷰 가져오는 부분 -->
<sql id="where-list">
	<if test="searchKey=='giupName'">
		INSTR(g1_name, #{searchValue}) &gt; 0
	</if>
	<if test="searchKey=='m1Eamil'">
		m1_email=#{searchValue}
	</if>
</sql>




<!-- 모든 리스트 가져오기 -->
<select id="getReviewAllList" resultType="com.sp.giupReview.giupReview" parameterType="map">
  SELECT * FROM (
  	SELECT ROWNUM rnum, tb.* FROM (	
		select r.rep_num, g.g1_name, rep_star, rep_created, rep_content, r.m1_num, m1_email, g.g1_num, jumun_num, rp.rphoto_OriginalFilename, rp.rphoto_SaveFilename from giupReview r
			left outer join reviewphoto rp on rp.rep_num = r.rep_num 
	    	left outer join giup1 g on g.g1_num = r.g1_num
	    	left outer join member1 m1 on r.m1_num= m1.m1_num
	    	<where>
				<if test="searchValue!=null and searchValue!='' ">
					<include refid="where-list"/>
				</if>
			</where>
      order by r.rep_num desc
       <![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
        ) WHERE rnum >= #{start}    
      ]]>
      
</select>
      
      
<select id="getDataCount" parameterType="map" resultType="Integer">
	select nvl(count(*), 0) from giupReview r
	left outer join member1 m1 on r.m1_num = m1.m1_num
	left outer join giup1 g on g.g1_num = r.g1_num
	<where>
		<if test="searchValue!=null and searchValue!='' ">
			<include refid="where-list"/>
		</if>
	</where>
</select>
      
      
      
      
 <!-- 마이페이지 -->
 <select id="getReviewList" resultType="com.sp.giupReview.giupReview" parameterType="Integer">
  SELECT * FROM (
  	SELECT ROWNUM rnum, tb.* FROM (	
		select r.rep_num, g.g1_name, rep_star, rep_created, rep_content, r.m1_num, m1_email, g.g1_num, jumun_num, rp.rphoto_OriginalFilename, rp.rphoto_SaveFilename from giupReview r
			left outer join reviewphoto rp on rp.rep_num = r.rep_num 
	    	left outer join giup1 g on g.g1_num = r.g1_num
	    	left outer join member1 m1 on r.m1_num= m1.m1_num
	    	where r.m1_num=#{m1_num}
      order by r.rep_num desc
       <![CDATA[
	        ) tb
        ) WHERE rnum =1    
      ]]>
      
</select>
      
</mapper>