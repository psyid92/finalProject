<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="blog">
	<!-- 블로그 카테고리 대분류 -->
	<select id="listBlogThemeGroup" resultType="com.sp.blog.BlogTheme">
	    SELECT themeNum, subject FROM blogInfo_theme
	          WHERE parent IS NULL
	          ORDER BY themeNum ASC
	</select>
	
	<!-- 블로그 카테고리 중분류 -->
	<select id="listBlogTheme" parameterType="Integer" resultType="com.sp.blog.BlogTheme">
	    SELECT themeNum, subject, parent FROM blogInfo_theme
	          WHERE parent = #{groupNum}
	          ORDER BY themeNum ASC
	</select>
	
	<!-- 블로그 카테고리를 계층적으로 가져오기 -->
	<select id="listBlogThemeAll" resultType="com.sp.blog.BlogTheme">
	    SELECT themeNum, subject, NVL(parent, 0) parent
	    FROM
	    (
	         SELECT 0 themeNum, null subject, null parent
	            FROM DUAL
	         UNION ALL
	         SELECT themeNum, subject, NVL(parent, 0) parent
  	            FROM blogInfo_theme
	    )
	    WHERE themeNum!=0
	    START WITH themeNum=0
	    CONNECT BY PRIOR themeNum=parent	
	</select>
	
	<!-- 생성되는 블로그 정보 저장 -->
	<select id="maxBlogSeq" resultType="Long">
	    SELECT NVL(MAX(blogSeq), 0) FROM blogInfo
	</select>
	
	<insert id="insertBlogInfo" parameterType="com.sp.blog.BlogInfo">
	    INSERT INTO blogInfo(blogSeq, userId, nickName, 
	                  themeNum, title, introduce, prologue, closed)
	      VALUES (#{blogSeq}, #{userId}, #{nickName}, #{themeNum}, 
	                #{title}, #{introduce}, #{prologue}, #{closed})
	</insert>

	<insert id="insertBlogProfile" parameterType="com.sp.blog.BlogInfo">
	    INSERT INTO blogProfile(blogSeq, userName, isUserName, 
	                  photoFilename, city, isCity, gender, isGender, hobby, isHobby)
	      VALUES (#{blogSeq}, #{userName}, #{isUserName},
	                 #{photoFilename, jdbcType=VARCHAR}, 
	                 #{city}, #{isCity}, #{gender}, #{isGender},
	                 #{hobby, jdbcType=VARCHAR}, #{isHobby})
	</insert>

    <!-- 블로그 정보 수정 -->
	<update id="updateBlogInfo" parameterType="com.sp.blog.BlogInfo">
	    UPDATE blogInfo SET nickName=#{nickName},
	           themeNum=#{themeNum},
	           title=#{title}, introduce=#{introduce}, prologue=#{prologue}, closed=#{closed}
	           WHERE blogSeq=#{blogSeq}
	</update>

	<update id="updateBlogProfile" parameterType="com.sp.blog.BlogInfo">
	    UPDATE blogProfile SET isUserName=#{isUserName},
	           photoFilename=#{photoFilename, jdbcType=VARCHAR},
	           city=#{city}, isCity=#{isCity},
	           gender=#{gender}, isGender=#{isGender}, 
	           hobby=#{hobby, jdbcType=VARCHAR}, isHobby=#{isHobby}
	           WHERE blogSeq=#{blogSeq}
	</update>
	
    <update id="deleteBlogProfileImage" parameterType="Long">
        UPDATE blogProfile SET photoFilename=''
                    WHERE blogSeq=#{blogSeq}
    </update>
	
	<!-- 블로그 정보 삭제 -->
	<delete id="deleteBlogInfo" parameterType="Long">
	    DELETE FROM blogInfo WHERE blogSeq=#{blogSeq}
	</delete>

	<delete id="deleteBlogProfile" parameterType="Long">
	    DELETE FROM blogProfile WHERE blogSeq=#{blogSeq}
	</delete>

	<!-- 블로그 전체 리스트 -->
	<sql id="blog-where">
	   INSTR(g.subject, #{search}) &gt; 0 OR
	   INSTR(c.subject, #{search}) &gt; 0 OR
	   userId = #{search} OR
	   nickName = #{search} OR
	   INSTR(title, #{search}) &gt; 0 OR
	   INSTR(introduce, #{search}) &gt; 0
	</sql>
	
	<select id="dataCountBlog" parameterType="map" resultType="Integer">
	    SELECT NVL(COUNT(*), 0) 
               FROM blogInfo b
	           JOIN blogProfile p ON b.blogSeq = p.blogSeq
	           JOIN blogInfo_theme c ON b.themeNum=c.themeNum
               JOIN (
                         SELECT themeNum, subject FROM blogInfo_theme
                         WHERE parent IS NULL
                       ) g ON c.parent = g.themeNum
	     <where>
	     	<if test="search!=null and search!='' ">
	     	    <include refid="blog-where"/>
	     	</if>
	     	<if test="themeNum!=0 ">
	     	    AND b.themeNum = #{themeNum}
	     	</if>
	     	<if test="user=='general' ">	     	
	     	    AND closed=0
	     	 </if>
	     </where>
	</select>
	
	<select id="listBlog" parameterType="map" resultType="com.sp.blog.BlogInfo">
 		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT b.blogSeq, userId, nickName, b.themeNum, c.parent groupNum
			            ,title, introduce, visitorCount, closed, created, userName
	                    ,c.subject, g.subject groupSubject
      	           FROM blogInfo b
	               JOIN blogProfile p ON b.blogSeq = p.blogSeq
	               JOIN blogInfo_theme c ON b.themeNum=c.themeNum
	               JOIN (
	                         SELECT themeNum, subject FROM blogInfo_theme
	                         WHERE parent IS NULL
	                       ) g ON c.parent = g.themeNum
	               <where>
	     	          <if test="search!=null and search!='' ">
	     	               <include refid="blog-where"/>
	     	          </if>
	     	          <if test="themeNum!=0 ">
	     	               AND b.themeNum = #{themeNum}
	     	          </if>
	     	          <if test="user=='general' ">	     	
	     	              AND closed=0
	     	          </if>
	               </where>
	                ORDER BY visitorCount DESC, created DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
 	</select>
	
	<!-- 내 블로그의 전체 정보 -->
	<select id="readBlogInfo" parameterType="map" resultType="com.sp.blog.BlogInfo">
	    SELECT b.blogSeq, userId, nickName, b.themeNum, c.parent groupNum
	              ,title, introduce, prologue, visitorCount, created, closed
	              ,userName, isUserName, photoFilename, city
	              ,isCity, gender, isGender, hobby, isHobby
	              ,c.subject, g.subject groupSubject
	           FROM blogInfo b
	           JOIN blogProfile p ON b.blogSeq = p.blogSeq
	           JOIN blogInfo_theme c ON b.themeNum=c.themeNum
               JOIN (
                         SELECT themeNum, subject FROM blogInfo_theme
                         WHERE parent IS NULL
                       ) g ON c.parent = g.themeNum
	           WHERE ${field}=#{field_value}
	</select>
	
	<!-- 개인 블로그의 메인 화면에 출력할 정보 -->
	<select id="readBlogInfoHome" parameterType="Long" resultType="com.sp.blog.BlogInfo">
	    SELECT b.blogSeq, userId, nickName, b.themeNum, c.parent groupNum
	                ,title, introduce, visitorCount, created, photoFilename
	                ,c.subject, g.subject groupSubject
	           FROM blogInfo b
	           JOIN blogProfile p ON b.blogSeq = p.blogSeq
	           JOIN blogInfo_theme c ON b.themeNum=c.themeNum
               JOIN (
                         SELECT themeNum, subject FROM blogInfo_theme
                         WHERE parent IS NULL
                       ) g ON c.parent = g.themeNum
	           WHERE b.blogSeq=#{blogSeq}
	</select>
	
	<!-- 개인 블로그의 프로필에 출력할 정보 -->
	<select id="readBlogInfoProfile" parameterType="Long" resultType="com.sp.blog.BlogInfo">
	    SELECT b.blogSeq, userId, nickName, introduce  
	              ,userName, isUserName, photoFilename, city
	              ,isCity, gender, isGender, hobby, isHobby
	           FROM blogInfo b
	           JOIN blogProfile p ON b.blogSeq = p.blogSeq
	           WHERE b.blogSeq=#{blogSeq}
	</select>

	<!-- 개인 블로그의 방문자수 증가 -->
	<update id="updateBlogVisitorCount" parameterType="Long" >
	    UPDATE blogInfo SET  visitorCount=visitorCount+1 WHERE blogSeq=#{blogSeq}
	</update>

	<!-- 테이블 생성 및 삭제  -->
	<!-- 블로그 게시판 카테고리 -->
	<update id="createBoardCategoryTable" parameterType="Long">
		CREATE TABLE b_${value}_category (
            categoryNum  NUMBER NOT NULL
           ,classify     VARCHAR2(255) NOT NULL
           ,parent       NUMBER
           ,themeNum   NUMBER 
           ,closed       NUMBER(1) DEFAULT 0
           ,PRIMARY      KEY(categoryNum)
           ,FOREIGN      KEY(parent) REFERENCES b_${value}_category(categoryNum)
	                           ON DELETE CASCADE
           ,FOREIGN      KEY(themeNum) REFERENCES blogInfo_theme(themeNum)
		)
	</update>
	<update id="dropBoardCategoryTable" parameterType="Long">
	    DROP TABLE b_${value}_category PURGE
	</update>

	<!-- 블로그 게시판 -->
	<update id="createBoardTable" parameterType="Long">
		CREATE TABLE b_${value}_board (
  		  num         NUMBER NOT NULL
  		  ,blogSeq      NUMBER NOT NULL
 	      ,categoryNum  NUMBER NOT NULL
  		  ,subject     VARCHAR2(255) NOT NULL
  		  ,content     CLOB NOT NULL
  		  ,hitCount    NUMBER  DEFAULT 0
  		  ,created     DATE DEFAULT SYSDATE
  		  ,PRIMARY   KEY(num)
 		  ,FOREIGN    KEY(blogSeq) REFERENCES blogInfo(blogSeq)
                     ON DELETE CASCADE
  		  ,FOREIGN   KEY(categoryNum) REFERENCES b_${value}_category(categoryNum)
  		             ON DELETE CASCADE
       )
	</update>

	<update id="dropBoardTable" parameterType="Long">
	    DROP TABLE b_${value}_board PURGE
	</update>

	<!-- 블로그 게시판 공감 -->
	<update id="createBoardLikeTable" parameterType="Long">
	CREATE TABLE b_${value}_boardLike (
  	  num       NUMBER NOT NULL
  	  ,userId   VARCHAR2(50) NOT NULL
  	  ,PRIMARY  KEY(num, userId)
  	  ,FOREIGN  KEY(num) REFERENCES b_${value}_board(num)
	      ON DELETE CASCADE
 	   ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	      ON DELETE CASCADE
	)
	</update>
	<update id="dropBoardLikeTable" parameterType="Long">
	    DROP TABLE b_${value}_boardLike PURGE
	</update>

	<!-- 블로그 게시판 파일 -->
	<update id="createBoardFileTable" parameterType="Long">
	CREATE TABLE b_${value}_boardFile (
 	   fileNum              NUMBER NOT NULL
 	   ,num                  NUMBER NOT NULL
 	   ,saveFilename     VARCHAR2(255) NOT NULL
 	   ,originalFilename VARCHAR2(255) NOT NULL
 	   ,fileSize         NUMBER
 	   ,PRIMARY KEY(fileNum)
 	   ,FOREIGN KEY(num) REFERENCES b_${value}_board(num)
                      ON DELETE CASCADE
	)
	</update>

	<update id="dropBoardFileTable" parameterType="Integer">
	    DROP TABLE b_${value}_boardFile PURGE
	</update>
	
	<!-- 블로그 게시판 리플 -->
	<update id="createBoardReplyTable" parameterType="Long">
	CREATE TABLE b_${value}_boardReply (
 	   replyNum  NUMBER NOT NULL
  	   ,num      NUMBER NOT NULL
  	   ,userId   VARCHAR2(50) NOT NULL
  	   ,content  VARCHAR2(4000) NOT NULL
   	   ,created  DATE DEFAULT SYSDATE
  	   ,answer   NUMBER NOT NULL
 	   ,PRIMARY  KEY(replyNum)
   	   ,FOREIGN  KEY(num) REFERENCES b_${value}_board(num)
	         ON DELETE CASCADE
   	   ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	         ON DELETE CASCADE
	)
	</update>
	<update id="dropBoardReplyTable" parameterType="Long">
	    DROP TABLE b_${value}_boardReply PURGE
	</update>

 	<!-- 블로그 게시판 리플 공감/비공감 -->
	<update id="createBoardReplyLikeTable" parameterType="Long">
	CREATE TABLE b_${value}_boardReplyLike (
 	    replyNum  NUMBER NOT NULL
 	    ,userId   VARCHAR2(50) NOT NULL
 	    ,replyLike NUMBER(1) NOT NULL
 	    ,PRIMARY  KEY(replyNum, userId)
 	    ,FOREIGN  KEY(replyNum) REFERENCES b_${value}_boardReply(replyNum)
	         ON DELETE CASCADE
 	    ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	         ON DELETE CASCADE
	)
	</update>    
	<update id="dropBoardReplyLikeTable" parameterType="Long">
	    DROP TABLE b_${value}_boardReplyLike PURGE
	</update>

 	<!-- 블로그 방명록 -->
	<update id="createGuestTable" parameterType="Long">
	CREATE TABLE b_${value}_guest (
 	    num       NUMBER NOT NULL
	    ,blogSeq      NUMBER NOT NULL
	    ,userId   VARCHAR2(50) NOT NULL
	    ,content  VARCHAR2(4000) NOT NULL
	    ,created  DATE DEFAULT SYSDATE
	    ,PRIMARY  KEY(num)
 	    ,FOREIGN    KEY(blogSeq) REFERENCES blogInfo(blogSeq)
                     ON DELETE CASCADE
        ,FOREIGN  KEY(userId) REFERENCES member2(userId)
	      ON DELETE CASCADE
	)
	</update>    
	<update id="dropGuestTable" parameterType="Long">
	    DROP TABLE b_${value}_guest PURGE
	</update>

 	<!-- 블로그 포토 -->
	<update id="createPhotoTable" parameterType="Long">
	CREATE TABLE b_${value}_photo (
 	   num       NUMBER NOT NULL
  	   ,blogSeq      NUMBER NOT NULL
 	   ,subject  VARCHAR2(255) NOT NULL
  	   ,content  VARCHAR2(4000) NOT NULL
 	   ,imageFilename VARCHAR2(255) NOT NULL
 	   ,created  DATE DEFAULT SYSDATE
  	   ,PRIMARY  KEY(num)
   	   ,FOREIGN    KEY(blogSeq) REFERENCES blogInfo(blogSeq)
  	                   ON DELETE CASCADE
	)
	</update>    
	<update id="dropPhotoTable" parameterType="Long">
	    DROP TABLE b_${value}_photo PURGE
	</update>

</mapper>