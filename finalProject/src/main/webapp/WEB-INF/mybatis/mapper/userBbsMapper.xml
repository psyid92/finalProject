<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userBbs">
  <insert id="insertUserBbs" parameterType="com.sp.userBbs.UserBbs">
    INSERT INTO userBbs(bbs_Num, m1_Num, bbs_Subject, bbs_Content, bbs_SaveFilename ,bbs_OriginalFilename)
    VALUES(userBbs_seq.NEXTVAL, #{m1_Num}, #{bbs_Subject}, #{bbs_Content}, #{bbs_SaveFilename, jdbcType=VARCHAR}, #{bbs_OriginalFilename, jdbcType=VARCHAR})
  </insert>
  
   <sql id="where-list">
    <if test="searchKey=='m1_nickname'">
      m1_nickname=#{searchValue}
    </if>
    <if test="searchKey=='bbs_Subject'">
      bbs_Subject LIKE '%' || #{searchValue} || '%'
    </if>
    <if test="searchKey=='bbs_Content'">
      DBMS_LOB.INSTR( bbs_Content, #{searchValue}) &gt; 0 
    </if>
    <if test="searchKey=='bbs_Created' ">
	  TO_CHAR(bbs_Created, 'YYYY-MM-DD') = #{searchValue}
	   OR TO_CHAR(bbs_Created, 'YYYYMMDD') = #{searchValue}
	</if>
  </sql>
  
  <select id="dataCount" parameterType="map" resultType="Integer">
    SELECT NVL(COUNT(*),0) FROM userBbs b JOIN member1 m1 ON b.m1_Num=m1.m1_Num
    <where>
      <if test="searchValue!=null and searchValue!='' ">
        <include refid="where-list"/>
      </if>
    </where>
  </select>
  
  
  <select id="listUserBbs" parameterType="map" resultType="com.sp.userBbs.UserBbs">
    SELECT * FROM (
      SELECT ROWNUM rnum, tb.*FROM(
        SELECT bbs_Num, b.m1_Num, bbs_Subject, m1_nickname, m1_Email, bbs_Count
               , TO_CHAR(bbs_Created, 'YYYY-MM-DD')bbs_Created, bbs_SaveFilename
               FROM userBbs b 
               JOIN member1 m1 ON b.m1_Num=m1.m1_Num
    <where>
      <if test="searchValue != null and searchValue !='' ">
        <include refid="where-list"/>
      </if>
    </where>
    ORDER BY bbs_Num DESC
<![CDATA[    
      )tb WHERE ROWNUM <= #{end}
    ) WHERE rnum  >= #{start}
    ]]>
  </select>
  
  
  <select id="updateCount" parameterType="Integer">
    UPDATE userBbs SET bbs_Count=bbs_Count+1 WHERE bbs_Num=#{bbs_Num}
  </select>
  
  <select id="readUserBbs" resultType="com.sp.userBbs.UserBbs" parameterType="Integer">
     SELECT bbs_Num, b.m1_Num, m1_nickname, m1_Email, bbs_Subject, bbs_Content, bbs_Count, bbs_Created
            ,bbs_SaveFilename, bbs_OriginalFilename
     FROM userBbs b JOIN member1 m1 ON b.m1_Num=m1.m1_Num WHERE bbs_Num=#{bbs_Num}       
  </select>
  
  <select id="preReadUserBbs" resultType="com.sp.userBbs.UserBbs" parameterType="map">
    SELECT tb.*FROM(
      SELECT bbs_Num, bbs_Subject FROM userBbs b JOIN member1 m1 ON b.m1_Num=m1.m1_Num
      <where>
      <if test="searchValue != null and searchValue !='' ">
        <include refid="where-list"/>
      </if>
    </where>
    <![CDATA[    
        AND (bbs_Num > #{bbs_Num})
    ]]>
    ORDER BY bbs_Num ASC
    ) tb WHERE ROWNUM=1
  </select>
  
  
  <select id="nextReadUserBbs" resultType="com.sp.userBbs.UserBbs" parameterType="map">
     SELECT tb.*FROM(
      SELECT bbs_Num, bbs_Subject FROM userBbs b JOIN member1 m1 ON b.m1_Num=m1.m1_Num
      <where>
      <if test="searchValue != null and searchValue !='' ">
        <include refid="where-list"/>
      </if>
    </where>
    <![CDATA[    
        AND (bbs_Num < #{bbs_Num})
    ]]>
    ORDER BY bbs_Num DESC
    ) tb WHERE ROWNUM=1
  </select>
  
  
  
  <update id="updateUserBbs" parameterType="com.sp.userBbs.UserBbs">
    UPDATE userBbs SET bbs_Subject=#{bbs_Subject}, bbs_Content=#{bbs_Content}
                       ,bbs_SaveFilename=#{bbs_SaveFilename, jdbcType=VARCHAR}
                       ,bbs_OriginalFilename=#{bbs_OriginalFilename, jdbcType=VARCHAR}
                       WHERE bbs_Num=#{bbs_Num}
  </update>
  
  <delete id="deleteUserBbs" parameterType="Integer">
    DELETE FROM userBbs WHERE bbs_Num=#{bbs_Num}
  </delete>
  
  <!-- 댓글처리 -->
  <insert id="insertUserBbsLike" parameterType="com.sp.userBbs.UserBbs">
    INSERT INTO userBbsLike(bbs_Num, m1_Num) VALUES(#{bbs_Num}, #{m1_Num})
  </insert>
  
  <select id="countUserBbsLike" resultType="Integer" parameterType="Integer">
    SELECT NVL(COUNT(*), 0) FROM userBbsLike bl
           JOIN userBbs b ON bl.bbs_Num=b.bbs_Num
           JOIN member1 m1 ON bl.m1_Num=m1.m1_Num
           WHERE bl.bbs_Num=#{bbs_Num}
  </select>
  
  <insert id="insertUserReply" parameterType="com.sp.userBbs.UserReply">
    INSERT INTO userBbsReply(rep_Num, bbs_Num, m1_Num, rep_Content, rep_Answer)
            VALUES(userBbsReply_seq.NEXTVAL, #{bbs_Num}, #{m1_Num}, #{rep_Content}, #{rep_Answer})   
  </insert>
  
   <select id="replyDataCount" resultType="Integer" parameterType="map">
    SELECT NVL(COUNT(*), 0) FROM userBbsReply WHERE bbs_Num=#{bbs_Num} AND rep_Answer=0
  </select>
  
  <!-- 댓글리스트 -->
  <select id="listUserReply" resultType="com.sp.userBbs.UserReply" parameterType="map">
    SELECT * FROM (
      SELECT ROWNUM rnum, tb.* FROM(
        SELECT tbreply.rep_Num, bbs_Num, m1_Num, m1_nickname, m1_Email,rep_Content, rep_Created, tbreply.rep_Answer
        ,NVL(rep_AnswerCount, 0)rep_AnswerCount
      FROM
      (
        (
          SELECT rep_Num, r.bbs_Num, r.m1_Num, m1_nickname, m1_Email, r.rep_Content, r.rep_Created, r.rep_Answer
          FROM userBbsReply r
          JOIN userBbs b ON r.bbs_Num=b.bbs_Num
          JOIN member1 m1 ON r.m1_Num=m1.m1_Num
          WHERE r.bbs_Num=#{bbs_Num} AND rep_Answer=0
        ) tbreply
        LEFT OUTER JOIN
        (
          SELECT rep_Answer, COUNT(*) rep_AnswerCount
                FROM userBbsReply GROUP BY rep_Answer
        )tbrep_Answer ON tbreply.rep_Num=tbrep_Answer.rep_Answer
      )  
      ORDER BY rep_Num DESC
      <![CDATA[
      ) tb WHERE ROWNUM <= #{end}
    )WHERE rnum >= #{start}
    ]]>
  </select>  
  
  
  <select id="listUserReplyAnswer" resultType="com.sp.userBbs.UserReply" parameterType="Integer">
    SELECT rep_Num, bbs_Num, r.m1_Num, m1_nickname, m1_Email,rep_Content, rep_Created, rep_Answer
           FROM userBbsReply r
           JOIN member1 m1 ON r.m1_Num=m1.m1_Num
           WHERE rep_Answer=#{rep_Answer}
           ORDER BY rep_Num DESC
  </select>
  
  <select id="replyCountAnswer" resultType="Integer" parameterType="Integer">
    SELECT NVL(COUNT(*), 0) FROM userBbsReply WHERE rep_Answer=#{rep_Answer}
  </select>
  
  <delete id="deleteUserReply" parameterType="map">
    DELETE userBbsReply WHERE
    <if test="mode=='bbs_Num' ">
      bbs_Num=#{bbs_Num}
    </if>
    <if test="mode=='reply' ">
      rep_Num IN(SELECT rep_Num FROM userBbsReply START WITH rep_Num=#{rep_Num}
                 CONNECT BY PRIOR rep_Num = rep_Answer)
    </if>
    <if test="mode=='rep_Answer' ">
      rep_Num=#{rep_Num}
    </if>
  </delete>
  
</mapper>